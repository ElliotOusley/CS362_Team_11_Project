Group 11: Seth Taylor, Elliot Ousley, Nathen dela Torre, Carlos Vasquez, Ben Snider, Hau’oli O’Brien 

Tentative Due Date: Monday 1/13/25 

Brainstorm (put any ideas down)  

Calendar Planner  

2-dimensional game 

Habit tracking app 

Educational Game for Learning Coding 

 A game that teaches programming concepts through puzzles and interactive challenges. 

A 2d puzzle game about finding words to put into a premade program to make it work. 

Pros: 

Godot already provides simple scripts for player movement 

Godot has plugins that allow integration with Github 

Controlled player experience, allowing for simpler level design 

Puzzles with limited solutions are easier to test 

Could be more fun to work on than other traditional apps, like a workout application or task tracker 

Cons: 

Could be hard to account for every combination of words that a player could use 

Adding new mechanics could get out of hand. Given that this game seeks to teach programming, every new concept could be considered a new feature. 

Examples: 

The player finds a large gap that they cannot cross, and must put words into a function that uses a for loop to create a bridge over the gap. 

The player must build an if statement to make a key work in a door 

Goal: For someone with no knowledge on the subject, learning programming can seem like an incredibly daunting task. This project seeks to gamify the process of learning to make it accessible to people who may feel intimidated by other options. 

Current practice: Current beginner friendly code learning tools like Codeacademy throw their users directly into programming, which can seem overwhelming to their users. W3Schools provides large blocks of text and quizzes, which can turn away new users. Most solutions to this problem charge monthly subscription fees, which can range from fairly reasonable, in the case of Codecademy Pro at around 40 dollars a month, to completely unaffordable, in the case of HackerRank’s 200-450 dollar a month fee. These high prices can turn people away from learning new skills. 

Novelty: With this project, we seek to gamify the process of learning code in a way that puts fun as the priority. By turning programming into a game mechanic, rather than the complete focus of the game, it makes the process of learning basic code concepts much more approachable. 

Effects: This project will make programming more accessible to people who feel intimidated by wordy, expensive, or complicated code learning platforms. By engaging with this project, these people will gain some confidence, which can allow them to seek out further skills. Programming is a skill that everyone should have, and we should therefore make it as accessible as possible. 

Technical approach: This project will primarily use Godot, an open-source game engine. The Godot engine supports its own language, GDscript, as well as C# and C++. Art assets for this project will be created in Aseprite, a popular pixel art program. 

Risks: What is the single most serious challenge or risk you foresee with developing your project on time? How will you minimize or mitigate the risk? Don’t state generic risks that would be equally applicable to any project, like “we might run out of time”.  

Using something like GitHub is the norm for Godot projects but can lead to some conflicts if multiple team members work on the same scene. This risk could be mitigated by splitting everything into multiple scenes, so that conflicts are less likely to occur 

Additionally, the team may have to learn how to use Godot while working on the project, which could cause issues as the project progresses. This issue can be minimized by the amount of educational resources available for learning Godot, like their incredibly comprehensive documentation and YouTube guides made by experienced users of Godot. 

 

Top-down RPG-style game 

A top-down game that features separate battle scenes, an inventory, and world movement. 

Pros:  

Small scale rpg style battle systems are easy to implement, especially in Godot. 

Godot has plugins that allow integration with Github 

Art assets can be fairly simple, especially if the majority of movement takes place in a world map style environment 

Simple gameplay loop, few features to implement 

Once basic functionality is established, more content can be generated easily 

Top-down 2D RPG games are fairly contained, meaning that player decisions are easier to account for. For example, the player can only choose predefined options within the battle scene, compared to free movement in something like a 2D platformer. 

Cons: 

If added, a dialogue system could be challenging to implement and tedious to fill with lines of text 

Inventory may be difficult to implement 

If not managed carefully, scope can get out of hand. 

Battle system could be complicated if there are multiple enemies or player characters. 

If scope is not managed, number of required art assets may get out of hand 

 

Project Pitch  

Start with a short and catchy project title (not “CS 362 project pitch”) and your full names. 

Abstract: The first paragraph of your document must be an abstract (or executive summary, or TL;DR) that explains your project at a high level. If someone read nothing but that one paragraph, what do you want them to know? 

Goal: What are you trying to do? for example, what task or problem will your system help users with? 

The goal of this project is 

Current practice: How is it done today, and what are the limits of current practice? 

Novelty: What is new in your approach and why do you think it will be more successful than other approaches? Do not reinvent the wheel or reimplement something that already exists, unless your approach is different. 

Effects: Who cares? If you are successful, what difference will it make? 

Technical approach: Briefly describe your proposed technical approach. This may include what system architecture, technologies, and tools you may use. 

Risks: What is the single most serious challenge or risk you foresee with developing your project on time? How will you minimize or mitigate the risk? Don’t state generic risks that would be equally applicable to any project, like “we might run out of time”. 

 

The focus of video gaming is player agency. As such, it can be difficult to account for every action a 

 
